---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        - default.yaml
      skip: true

- name: define delegate instance for download handling
  ansible.builtin.set_fact:
    trivy_delegate_to: "{{ ansible_host }}"
    trivy_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/trivy', true) }}/{{ trivy_version }}"
  when:
    - trivy_direct_download

- name: install dependency
  ansible.builtin.package:
    name: "{{ trivy_requirements }}"
    state: present
  when:
    - trivy_requirements | default([]) | count > 0

- name: get latest release
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - trivy_version == "latest"
  block:
    - name: get latest release
      delegate_to: localhost
      become: false
      run_once: true
      bodsch.scm.github_latest:
        project: distribution
        repository: distribution
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      register: _latest_release

    - name: re-define trivy_version
      ansible.builtin.set_fact:
        trivy_version: "{{ _latest_release.latest_release }}"

- name: detect our installation path
  ansible.builtin.stat:
    path: "{{ trivy_install_path | dirname }}"
    get_checksum: false
  register: stat_trivy_path
  ignore_errors: true

- name: old installation
  when:
    - stat_trivy_path is defined
    - stat_trivy_path.stat is defined
    - stat_trivy_path.stat.isdir is defined
    - not stat_trivy_path.stat.isdir
  block:
    - name: stop old service
      ansible.builtin.service:
        name: trivy
        state: stopped
        enabled: false
      notify:
        - daemon-reload

    - name: remove installed systemd unit
      ansible.builtin.file:
        state: absent
        path: /etc/systemd/system/trivy.service
      when:
        - ansible_service_mgr | lower == "systemd"

    - name: remove installed trivy
      ansible.builtin.file:
        state: absent
        path: "{{ stat_trivy_path.stat.path }}"

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: detect installed trivy binary
  ansible.builtin.stat:
    path: "{{ trivy_install_path }}/trivy"
  register: stat_trivy_binary

- name: create download directory
  become: false
  delegate_to: "{{ trivy_delegate_to }}"
  ansible.builtin.file:
    path: "{{ trivy_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: user and group handling
  when:
    - trivy_system_user != "root" or trivy_system_group != "root"
  block:
    - name: create trivy group
      ansible.builtin.group:
        name: "{{ trivy_system_group }}"
        state: present
        system: true
      when:
        - trivy_system_group != "root"

    - name: create trivy user
      ansible.builtin.user:
        name: "{{ trivy_system_user }}"
        groups: "{{ trivy_system_group }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        createhome: false
        home: /nonexistent
      when:
        - trivy_system_user != "root"

- name: create install directory
  ansible.builtin.file:
    path: "{{ trivy_install_path }}"
    state: directory
    owner: "{{ trivy_system_user }}"
    group: "{{ trivy_system_group }}"
    mode: 0755

- name: merge trivy configuration between defaults and custom
  ansible.builtin.set_fact:
    trivy_service: "{{ trivy_defaults_service | combine(trivy_service, recursive=True) }}"
    trivy_log: "{{ trivy_defaults_log | combine(trivy_log, recursive=True) }}"
    trivy_storage: "{{ trivy_defaults_storage | combine(trivy_storage, recursive=True) }}"
    trivy_auth: "{{ trivy_defaults_auth | combine(trivy_auth, recursive=True) }}"
    trivy_middleware: "{{ trivy_defaults_middleware | combine(trivy_middleware, recursive=True) }}"
    trivy_reporting: "{{ trivy_defaults_reporting | combine(trivy_reporting, recursive=True) }}"
    trivy_http: "{{ trivy_defaults_http | combine(trivy_http, recursive=True) }}"
    trivy_notifications: "{{ trivy_defaults_notifications | combine(trivy_notifications, recursive=True) }}"
    trivy_redis: "{{ trivy_defaults_redis | combine(trivy_redis, recursive=True) }}"
    trivy_health: "{{ trivy_defaults_health | combine(trivy_health, recursive=True) }}"
    trivy_proxy: "{{ trivy_defaults_proxy | combine(trivy_proxy, recursive=True) }}"
    trivy_compatibility: "{{ trivy_defaults_compatibility | combine(trivy_compatibility, recursive=True) }}"
    trivy_validation: "{{ trivy_defaults_validation | combine(trivy_validation, recursive=True) }}"

- name: define trivy data directory
  ansible.builtin.set_fact:
    trivy_data_dir: "{{ trivy_storage.filesystem.rootdirectory | default('/var/lib/trivy') }}"

...
